{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red93\green108\blue121;\red255\green255\blue255;\red0\green0\blue0;
\red14\green14\blue255;\red155\green35\blue147;\red11\green79\blue121;\red57\green0\blue160;\red108\green54\blue169;
\red50\green109\blue116;\red15\green104\blue160;\red196\green26\blue22;\red28\green0\blue207;\red28\green70\blue74;
\red246\green246\blue239;\red24\green24\blue28;\red224\green213\blue97;\red235\green0\blue121;\red157\green101\blue255;
\red103\green225\blue255;\red248\green60\blue79;\red72\green212\blue251;}
{\*\expandedcolortbl;;\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0\c85000;
\csgenericrgb\c5500\c5500\c100000;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c4314\c30980\c47451;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c42190\c21278\c66379;
\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c10981\c27276\c28869;
\cssrgb\c97255\c97255\c94902;\cssrgb\c12549\c12549\c14510;\cssrgb\c90196\c85882\c45490;\cssrgb\c94902\c14118\c54902;\cssrgb\c68235\c50588\c100000;
\cssrgb\c46275\c90196\c100000;\cssrgb\c98824\c33725\c38039;\cssrgb\c32941\c86275\c98824;}
\paperw12240\paperh15840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\partightenfactor0

\f0\fs24 \cf2 \cb3 //\cf4 \
\cf2 // From SwiftUI by Example by Paul Hudson\cf4 \
\cf2 // \cf5 https://www.hackingwithswift.com/quick-start/swiftui\cf4 \
\cf2 //\cf4 \
\cf2 // You're welcome to use this code for any purpose,\cf4 \
\cf2 // commercial or otherwise, with or without attribution.\cf4 \
\cf2 //\cf4 \
\
\pard\tx593\pardeftab593\partightenfactor0

\f1\b \cf6 import
\f0\b0 \cf4  SwiftUI\
\

\f1\b \cf6 struct
\f0\b0 \cf4  \cf7 ContentView\cf4 : \cf8 View\cf4  \{\
    \cf9 @Environment\cf4 (\\.\cf10 scenePhase\cf4 ) 
\f1\b \cf6 var
\f0\b0 \cf4  \cf11 scenePhase\cf4 \
    
\f1\b \cf6 let
\f0\b0 \cf4  \cf11 userDefaults\cf4  = \cf8 UserDefaults\cf4 .\cf9 standard\cf4 \
    \cf2 // let calcTime: Date\cf4 \
    \cf8 @State\cf4  
\f1\b \cf6 var
\f0\b0 \cf4  \cf11 textDisplayed\cf4 : \cf8 String\cf4  = \cf12 "StartingText"\cf4 \
    
\f1\b \cf6 init
\f0\b0 \cf4 () \{\
        \cf10 userDefaults\cf4 .\cf9 set\cf4 (\cf8 Date\cf4 (), \cf9 forKey\cf4 : \cf12 "calcTime"\cf4 )\
    \}\
    
\f1\b \cf6 var
\f0\b0 \cf4  \cf11 body\cf4 : 
\f1\b \cf6 some
\f0\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 Text\cf4 (\cf10 textDisplayed\cf4 )\
            .\cf9 onChange\cf4 (\cf9 of\cf4 : \cf10 scenePhase\cf4 ) \{ newPhase 
\f1\b \cf6 in
\f0\b0 \cf4 \
                
\f1\b \cf6 if
\f0\b0 \cf4  newPhase == .\cf9 inactive\cf4  \{\
                    \cf9 print\cf4 (\cf12 "Inactive"\cf4 )\
                    \cf10 textDisplayed\cf4  = \cf12 "Inactive"\cf4 \
                \} 
\f1\b \cf6 else
\f0\b0 \cf4  
\f1\b \cf6 if
\f0\b0 \cf4  newPhase == .\cf9 active\cf4  \{\
                    \cf9 print\cf4 (\cf12 "Active"\cf4 )\
                    \cf10 textDisplayed\cf4  = \cf12 "Active"\cf4 \
                    
\f1\b \cf6 let
\f0\b0 \cf4  now = \cf8 Date\cf4 .\cf9 now\cf4 \
                    
\f1\b \cf6 let
\f0\b0 \cf4  calcTime = \cf10 userDefaults\cf4 .\cf9 object\cf4 (\cf9 forKey\cf4 : \cf12 "calcTime"\cf4 ) 
\f1\b \cf6 as
\f0\b0 \cf4 ! \cf8 Date\cf4 \
                    \cf9 print\cf4 (\cf12 "calcTime is \cf4 \\(calcTime)\cf12 "\cf4 )\
                    \cf9 print\cf4 (\cf12 "time (now) when became active is:\cf4 \\(now)\cf12 "\cf4 )\
                    
\f1\b \cf6 let
\f0\b0 \cf4  expiryTime = calcTime.\cf9 addingTimeInterval\cf4 (\cf13 10\cf4 )\
                    \cf9 print\cf4 (\cf12 "expiryTime is \cf4 \\(expiryTime)\cf12 "\cf4 )\
                    \
                    \
                    
\f1\b \cf6 let
\f0\b0 \cf4  range = calcTime...expiryTime\
                    \cf9 print\cf4 (range)\
                    
\f1\b \cf6 if
\f0\b0 \cf4  range.\cf9 contains\cf4 (now) \{\
                        \cf9 print\cf4 (\cf12 "in range, within 10 s"\cf4 )\
                    \}\
                    \
                \} 
\f1\b \cf6 else
\f0\b0 \cf4  
\f1\b \cf6 if
\f0\b0 \cf4  newPhase == .\cf9 background\cf4  \{\
                    \cf9 print\cf4 (\cf12 "Background"\cf4 )\
                    \cf10 textDisplayed\cf4  = \cf12 "Background"\cf4 \
                    \
                \}\
            \}\
    \}\
\}\
//toggle switch \

\f1\b \cf6 import
\f0\b0 \cf4  SwiftUI\
\

\f1\b \cf6 struct
\f0\b0 \cf4  \cf7 ContentView\cf4 : \cf8 View\cf4  \{\
    \cf8 @State\cf4  
\f1\b \cf6 private
\f0\b0 \cf4  
\f1\b \cf6 var
\f0\b0 \cf4  \cf11 isOn\cf4  = 
\f1\b \cf6 false
\f0\b0 \cf4 \
\
    
\f1\b \cf6 var
\f0\b0 \cf4  \cf11 body\cf4 : 
\f1\b \cf6 some
\f0\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 Toggle\cf4 (\cf12 "Filter"\cf4 , \cf8 isOn\cf4 : \cf10 $isOn\cf4 )\
            .\cf9 toggleStyle\cf4 (.\cf9 button\cf4 )\
            .\cf9 tint\cf4 (.\cf9 mint\cf4 )\
    \}\
\}\
\
\
//this code taken out of ContentView after deciding not to use Active Sheets any more.\
 \cf9 @Environment\cf4 (\\.\cf10 presentationMode\cf4 ) 
\f1\b \cf6 var
\f0\b0 \cf4  \cf11 presentationMode\
\pard\tx593\pardeftab593\partightenfactor0
\cf4    \cf8 @State\cf4  
\f1\b \cf6 private
\f0\b0 \cf4  
\f1\b \cf6 var
\f0\b0 \cf4  \cf11 activeSheet\cf4 : \cf14 ActiveSheet\cf4 ?\
                \cf2 // activeSheet = .displayResults\
//            .sheet(item: $activeSheet)\{\cf4 \
\cf2 //                item in\cf4 \
\cf2 //                sheetView(with: item)\cf4 \
\cf2 //            \}\
//        @ViewBuilder\cf4 \
\cf2 //        private func sheetView(with item: ActiveSheet) -> some View \{\cf4 \
\cf2 //            switch item \{\cf4 \
\cf2 //            case .firstSheet:\cf4 \
\cf2 //                Color.red\cf4 \
\cf2 //            case .displayResults:\cf4 \
\cf2 //                ResultsView(ftTOD: $ftTOD, showResults: $showResults)\cf4 \
\cf2 //            case .displayWindPicker:\cf4 \
\cf2 //                Color.blue\cf4 \
\cf2 //            \}\cf4 \
\cf2 //        \}\
\
\pard\tx593\pardeftab593\partightenfactor0

\f1\b \cf6 enum
\f0\b0 \cf4  \cf7 ActiveSheet\cf4 : \cf8 Identifiable\cf4 , \cf8 Equatable\cf4  \{\
    
\f1\b \cf6 case
\f0\b0 \cf4  \cf11 firstSheet\cf4 \
    
\f1\b \cf6 case
\f0\b0 \cf4  \cf11 displayResults\cf2 //(results)//can't do this, due results is not known here\cf4 \
    
\f1\b \cf6 case
\f0\b0 \cf4  \cf11 displayWindPicker\cf4 \
    
\f1\b \cf6 var
\f0\b0 \cf4  \cf11 id\cf4 : \cf8 String\cf4  \{\cf2 //this is for the enum's id\cf4 \
        
\f1\b \cf6 let
\f0\b0 \cf4  mirror = \cf8 Mirror\cf4 (\cf9 reflecting\cf4 : 
\f1\b \cf6 self
\f0\b0 \cf4 )\
        
\f1\b \cf6 if
\f0\b0 \cf4  
\f1\b \cf6 let
\f0\b0 \cf4  label = mirror.\cf9 children\cf4 .\cf9 first\cf4 ?.\cf9 label\cf4  \{\
            
\f1\b \cf6 return
\f0\b0 \cf4  label\
        \} 
\f1\b \cf6 else
\f0\b0 \cf4  \{\
            
\f1\b \cf6 return
\f0\b0 \cf4  \cf12 "\cf4 \\(
\f1\b \cf6 self
\f0\b0 \cf4 )\cf12 "\cf4 \
        \}\
    \}\
\}\
\
\pard\pardeftab720\partightenfactor0

\fs36 \cf15 \cb16 \expnd0\expndtw0\kerning0
\shad\shadx0\shady-20\shadr0\shado0 \shadc0     \cf17 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 @State\cf15 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  
\f1\b \cf18 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 private
\f0\b0 \cf15 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  
\f1\b \cf18 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f0\b0 \cf15 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  showingAlert = \cf19 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 false\cf15 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
\
    
\f1\b \cf18 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 var
\f0\b0 \cf15 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  body: 
\f1\b \cf18 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 some
\f0\b0 \cf15 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \cf20 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 View\cf15 \shad\shadx0\shady-20\shadr0\shado0 \shadc0  \{\
        \cf20 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 Button\cf15 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (\cf21 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "Show Alert"\cf15 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 ) \{\
            showingAlert = \cf19 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 true\cf15 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 \
        \}\
        .\cf22 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 alert\cf15 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (\cf21 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "Important message"\cf15 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 , isPresented: $showingAlert) \{\
            \cf20 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 Button\cf15 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 (\cf21 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 "OK"\cf15 \shad\shadx0\shady-20\shadr0\shado0 \shadc0 , role: .cancel) \{ \}\
        \}\
    \}
\fs24 \cf4 \cb3 \kerning1\expnd0\expndtw0 \shad0 \
\pard\tx593\pardeftab593\partightenfactor0
\cf4 \
\
\
from Stack Overflow, found this fab mod for a textfield to show Cancel and Enter buttons\
\pard\tx593\pardeftab593\partightenfactor0

\f1\b \cf6 struct
\f0\b0 \cf4  \cf7 ContentView\cf4 : \cf8 View\cf4  \{\
    \cf8 @State\cf4  
\f1\b \cf6 var
\f0\b0 \cf4  \cf11 name\cf4  = \cf12 ""\cf4 \
    \cf8 @FocusState\cf4  
\f1\b \cf6 var
\f0\b0 \cf4  \cf11 nameIsFocussed\cf4 : \cf8 Bool\cf4 \
    \
    
\f1\b \cf6 var
\f0\b0 \cf4  \cf11 body\cf4 : 
\f1\b \cf6 some
\f0\b0 \cf4  \cf8 View\cf4  \{\
        \cf8 VStack\cf4  \{\
            \cf8 NavigationView\cf4  \{\
                \cf8 TextField\cf4 (\cf12 "enter stuff"\cf4 , \cf8 text\cf4 : \cf10 $name\cf4 )\
                    .\cf9 keyboardType\cf4 (.\cf9 numberPad\cf4 )\
                    .\cf9 frame\cf4 (\cf9 height\cf4 : \cf13 30\cf4 , \cf9 alignment\cf4 : .\cf9 leading\cf4 )\
                    .\cf9 toolbar\cf4 () \{\
                        \cf8 ToolbarItemGroup\cf4 (\cf9 placement\cf4 : .\cf9 keyboard\cf4 ) \{\
                            \cf8 Button\cf4 \{ \cf10 nameIsFocussed\cf4  = 
\f1\b \cf6 false
\f0\b0 \cf4 \}\
                        \cf9 label\cf4 : \{\cf8 Text\cf4 (\cf12 "Cancel"\cf4 ).\cf9 bold\cf4 ()\
                            \
                        \}\
                            \cf8 Button\cf4 \{ \cf10 nameIsFocussed\cf4  = 
\f1\b \cf6 false
\f0\b0 \cf4 ; \cf9 print\cf4 (\cf12 "return"\cf4 )\}\
                        \cf9 label\cf4 : \{\cf8 Text\cf4 (\cf12 "Return"\cf4 ).\cf9 bold\cf4 ()\
                            \
                        \}\
                        \}\
                    \}\cf2 //.background(Color.red)\cf4 \
                    .\cf9 navigationBarHidden\cf4 (
\f1\b \cf6 true
\f0\b0 \cf4 )\cf2 //not sure what this does\cf4 \
            \}\
        \}\
        \cf2 // .padding()\cf4 \
    \}\
\}\
\
 \cf2 //  DispatchQueue.main.asyncAfter(deadline: .now() + 0.1)\{\
\
\pard\tx593\pardeftab593\partightenfactor0
\cf4     \
    \cf2 //@FocusState  var focused: Bool?\cf4 \
    \cf2 //@StateObject var checkCalc: CheckCalc = CheckCalc()\cf4 \
    \
    \cf2 //@State var weightEntry: String = "2400"\cf4 \
   \cf2 // @State var isWeightValid: Bool = true\cf4 \
    \cf2 //@State var tempEntry: String = "    "\cf4 \
    \cf2 //@State var isTempValid: Bool = true\cf4 \
    \cf2 //@State var elevationEntry: String = "   "\cf4 \
    \cf2 //@State var isElevationValid: Bool = true\cf4 \
    \cf2 //@State var qnhEntry: String = "    "\cf4 \
    \cf2 //@State var isQNHValid: Bool = true\
\
//class CheckCalc: ObservableObject \{\cf4 \
\cf2 //    @Published var isValid: Bool = true\cf4 \
\cf2 //\}\cf4 \
                    \cf2 //oldQNHView(qnhEntry: $qnhEntry, isQNHValid: $isQNHValid, focused: $focused)\
\cf4                     \
                   \cf2 // oldElevationView(elevationEntry: $elevationEntry, isElevationValid: $isElevationValid, focused: $focused)\
\cf4                     \
                   \cf2 // oldTemperatureView(temperatureEntry: $tempEntry, isTempValid: $isTempValid, focused: $focused)\
\cf4                    \cf2 // oldWeightView(weightEntry: $weightEntry, isWeightValid: $isWeightValid, focused: $focused)}